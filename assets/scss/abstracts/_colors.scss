// Colors
$white: hsl(0, 0%, 100%);
$grey_1: hsl(0, 0%, 98%);
$grey_2: hsl(230, 30%, 96%);
$grey_3: hsl(0, 0%, 93%);
$grey_4: hsl(0, 0%, 88%);
$grey_5: hsl(0, 0%, 74%);
$grey_6: hsl(0, 0%, 62%);
$grey_7: hsl(0, 0%, 46%);
$grey_8: hsl(0, 0%, 38%);
$grey_9: hsl(210, 2%, 26%);
$grey_10: hsl(210, 3%, 13%);
$black: hsl(0, 0%, 0%);

// Brand Colors - Needed for buttons, paragraphs colors and backgrounds in Gutenberg.
$brand_colors: (
    orange: hsl(24, 75%, 50%),
    light-orange: hsl(12, 62%, 66%),
    red: hsl(359, 62%, 50%),
    grey: $grey_2,
    dark-grey: $grey_8,
    orange-grey: hsl(42, 15%, 13%),
    almost-black: hsl(214, 28%, 5%),
);

// General color variables
$clr-primary-300: hsl(24, 75%, 60%);
$clr-primary-400: hsl(24, 75%, 50%);
$clr-primary-500: hsl(24, 75%, 40%);
$clr-secondary-300: hsl(12, 62%, 80%);
$clr-secondary-400: hsl(12, 62%, 66%);
$clr-secondary-500: hsl(12, 62%, 50%);
$clr-highlight-400: hsl(359, 62%, 50%);
$clr-font-400: hsl(40, 13%, 23%);
$clr-border-400: $grey_4;

// Menu color variables
$clr-submenu-bg: hsl(42, 15%, 13%);
$clr-submenu-bg-hover: hsl(42, 15%, 23%);
$clr-mobile-menu-bg: hsl(214, 28%, 5%);

$clr-toggle-menu-bg: $white;
$clr-toggle-menu-bars: $clr-font-400;
$clr-toggle-menu-bars-active: $clr-primary-400;

// Social color variables
$clr-facebook: hsl(221, 44%, 41%);
$clr-twitter: hsl(195, 100%, 47%);
$clr-pinterest: hsl(358, 73%, 46%);

/**
 * Brand Color
 * 
 * Use: brand-color( 'blue', 'darken' );
 * The color has to be declare in the variable $brandcolors in base.scss
 *
 *  https://github.com/billerickson/EA-Genesis-Child/blob/master/assets/scss/modules/_brand-color.scss
 *
 */

// @function brand-color($key, $variant: null) {
//     @if map-has-key($brand_colors, $key) {
//         $color: map-get($brand_colors, $key);
//         @if ("lighten" == $variant) {
//             $lighten_key: $key + "_lighten";
//             @if map-has-key($brand_colors, $lighten_key) {
//                 $color: #{map-get($brand_colors, $lighten_key)};
//             } @else {
//                 $color: lighten($color, 10%);
//             }
//         } @else if("darken" == $variant) {
//             $darken_key: $key + "_darken";
//             @if map-has-key($brand_colors, $darken_key) {
//                 $color: #{map-get($brand_colors, $darken_key)};
//             } @else {
//                 $color: darken($color, 10%);
//             }
//         }
//         @return $color;
//     } @else {
//         @error "The #{$key} color could not be found in $brand_colors";
//     }
// }
